{;; User configuration for Clojure LSP

 ;; Add develop folder to default source paths
 :source-paths ["src" "test" "develop"]

 :source-aliases #{:env/dev :env/test}

 ;; Use meta data when defining private functions
 :use-metadata-for-privacy? true

 ;; Custom Snippets
 :additional-snippets
 [;; Documentation
  {:name "comment-heading"
   :detail "Comment Header"
   :snippet
   ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; ${1:Namespace summary title}
    ;;
    ;; ${2:Brief description}\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n$0"}
  {:name "comment-separator"
   :detail "Comment Separator"
   :snippet
   ";; ${1:Namespace summary title}\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n$0"}
  {:name "rich-comment"
   :detail "Create rich comment"
   :snippet
   "(comment
    ${0:body}
  #_()) ;; End of rich comment"}
  {:name "rich-comment-rdd"
   :detail "Create comment block"
   :snippet
   "#_{:clj-kondo/ignore [:redefined-var]}
   (comment
     ${0:body}
   #_()) ;; End of rich comment"}
  {:name "rich-comment-hotload"
   :detail "Rich comment library hotload"
   :snippet
   "#_{:clj-kondo/ignore [:redefined-var]}
    (comment
      ;; Add-lib library for hot-loading
      (require '[clojure.tools.deps.alpha.repl :refer [add-libs]])
      (add-libs '{${1:domain/library-name} {:mvn/version \"${2:1.0.0}\"}})
    ) ;; End of rich comment block"}

  ;; Core functions
  {:name "def"
   :detail "def with docstring"
   :snippet "(def ${1:name}\n  \"${2:docstring}\"\n  ${3:value} $0)"}
  {:name "def-"
   :detail "def private"
   :snippet "(def ^:private ${1:name}\n  \"${2:doc-string}\"\n  ${3:value})$0"}

  {:name " defn"
   :detail "Create public function"
   :snippet "(defn ${1:name}\n  \"${2:docstring}\"\n   [$2]\n  ${0:body})"}

  {:name " defn-"
   :detail "Create public function"
   :snippet "(defn ^:private ${1:name}\n  \"${2:docstring}\"\n   [$2]\n  ${0:body})"}

  {:name "ns"
   :detail "Create ns"
   :snippet "(ns ${1:name}\n  \"${2:docstring}\"\n  ${0:references})"}

  {:name "deps-alias"
   :detail "deps.edn alias with extra path & deps"
   :snippet
   ":${1:category/name}
    {:extra-paths [\"${2:path}\"]
     :extra-deps {${3:deps-maven or deps-git}}}$0"}

  {:name "deps-maven"
   :detail "deps.edn Maven dependency"
   :snippet
   "${1:domain/library-name} {:mvn/version \"${2:1.0.0}\"}$0"}

  {:name "deps-git"
   :detail "deps.edn Git dependency"
   :snippet
   "${1:domain/library-name}
       {:git/sha \"${2:git-sha-value}\"}$0"}

  {:name "deps-git-tag"
   :detail "Git dependency"
   :snippet
   "${1:domain/library-name}
      {:git/tag \"${2:git-tag-value}\"
       :git/sha \"${3:git-sha-value}\"}$0"}

  {:name "deps-git-url"
   :detail "Git URL dependency"
   :snippet
   "${1:domain/library-name}
      {:git/url \"https://github.com/$1:\"
       :git/sha \"${2:git-sha-value}\"}$0"}

  {:name "deps-local"
   :detail "deps.edn Maven dependency"
   :snippet
   "${1:domain/library-name} {:local/root \"${2:/path/to/project/root}\"}$0"}

  {:name "require-rdd"
   :detail "require RDD"
   :snippet "(require '[${1:namespace} :as ${0:alias}])"}

  {:name "require"
   :detail "require as"
   :snippet "(:require [${1:namespace} :refer [$0]])"}

  {:name "use"
   :detail "require as"
   :snippet "(:require [${1:namespace} :refer [$0]])"}

  {:name "deftest"
   :detail "deftest clojure.test"
   :snippet
   "(deftest ${1:name}-test
      (testing \"${2:Context of the test assertions}\"
        (is (= ${3:assertion-values}))$4)) $0"}]
 }
